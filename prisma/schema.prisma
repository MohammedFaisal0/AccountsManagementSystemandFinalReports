// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- Core Entities ---

model User {
  user_id     Int      @id @default(autoincrement())
  name        String?
  email       String   @unique
  password_hash String
  phone       String?  @db.VarChar(20)
  avatar_url  String?
  role        String   @default("employee") // administrator, employee, reviewer
  created_at  DateTime @default(now())

  // Relations
  assignedTasks Task[]
  notifications Notification[]

  @@map("users")
}

model Directorate {
  directorate_id Int      @id @default(autoincrement())
  name           String   @unique

  // Relations
  offices       Office[]

  @@map("directorates")
}

model Office {
  office_id      Int      @id @default(autoincrement())
  name           String
  directorate_id Int

  // Relations
  directorate        Directorate            @relation(fields: [directorate_id], references: [directorate_id])
  transactions       Transaction[]

  @@unique([name, directorate_id])
  @@map("offices")
}

// --- Consolidated Hierarchy ---
model Chapter {
  chapter_id String   @id
  name       String

  // Relations
  sections Section[]
  transactions Transaction[]

  @@map("chapters")
}

model Section {
  section_id String   @id
  name       String
  chapter_id String

  // Relations
  chapter Chapter @relation(fields: [chapter_id], references: [chapter_id])
  items   Item[]
  transactions Transaction[]

  @@map("sections")
}

model Item {
  item_id    String   @id
  name       String
  section_id String

  // Relations
  section Section @relation(fields: [section_id], references: [section_id])
  types   Type[]
  transactions Transaction[]

  @@map("items")
}

model Type {
  type_id    String   @id
  name       String
  item_id    String

  // Relations
  item        Item   @relation(fields: [item_id], references: [item_id])
  transactions Transaction[]

  @@map("types")
}

// --- Accounts Table ---
model AccountName {
  account_id    Int    @id @default(autoincrement())
  account_name  String @unique
  account_type  String
  // Relations
  accounts Account[]
  @@map("accna")
}

model Account {
  account_id    Int      @id @default(autoincrement())
  account_name  String
  accna_id      Int
  debit         Decimal  @db.Decimal(15, 2)
  credit        Decimal  @db.Decimal(15, 2)
  date          DateTime @db.Date

  // Relations
  accountName   AccountName @relation(fields: [accna_id], references: [account_id])

  @@unique([account_name])
  @@map("accounts")
}

// --- Transaction Table ---
model Transaction {
  transaction_id Int       @id @default(autoincrement())
  office_id      Int
  directorate_id Int
  account_id     Int // 1 for revenue, 2 for use
  type_id        String
  item_id        String
  section_id     String
  chapter_id     String
  amount         Decimal   @db.Decimal(15, 2)
  date           DateTime  @db.Date

  // Relations
  office       Office       @relation(fields: [office_id], references: [office_id])
  type         Type         @relation(fields: [type_id], references: [type_id])
  item         Item         @relation(fields: [item_id], references: [item_id])
  section      Section      @relation(fields: [section_id], references: [section_id])
  chapter      Chapter      @relation(fields: [chapter_id], references: [chapter_id])

  @@map("transactions")
}

// --- Supporting Entities ---
model Task {
  task_id    Int      @id @default(autoincrement())
  title      String
  due_date   DateTime? @db.Date
  priority   String // High, Medium, Low
  completed  Boolean  @default(false)
  user_id    Int? // Assignee
  created_at DateTime @default(now())

  // Relations
  assignee User? @relation(fields: [user_id], references: [user_id])

  @@map("tasks")
}

model Notification {
  notification_id Int      @id @default(autoincrement())
  title           String
  message         String   @db.Text
  type            String // info, warning, success
  timestamp       DateTime @default(now())
  user_id         Int // Recipient
  is_read         Boolean  @default(false)

  // Relations
  recipient User @relation(fields: [user_id], references: [user_id])

  @@map("notifications")
}

